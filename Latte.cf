-- programs ------------------------------------------------

entrypoints Prog ;

Program.    Prog ::= [TopDef] ;

-- functions ----------------------------------------------

Function.   Funct ::= Type Ident "(" [Arg] ")" Block ;

FnDef.      TopDef ::= Funct ;

separator nonempty TopDef "" ;

Argument.   Arg ::= Type Ident;

separator   Arg "," ;

-- classes -------------------------------------------------

ClassDef.         TopDef ::= "class" Ident ClsBlock ;

ClassDefExtend.   TopDef ::= "class" Ident "extends" Ident ClsBlock ;

ClassBlock.       ClsBlock ::= "{" [ClsDef] "}" ;

separator         ClsDef "" ;

ClassDefAttr.     ClsDef ::= ClsAttr ;

ClassDefMethod.   ClsDef ::= ClsMethod ;

ClassMethod.      ClsMethod ::= Funct ;

ClassAttribute.   ClsAttr ::= Type Ident ";" ;

-- statements ----------------------------------------------

BlockOfStatements.      Block ::= "{" [Stmt] "}" ;

separator               Stmt "" ;

Empty.                  Stmt ::= ";" ;

BStmt.                  Stmt ::= Block ;

Decl.                   Stmt ::= Type [Item] ";" ;

NoInit.                 Item ::= Ident ; 

Init.                   Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

AssArr.    Stmt ::= Ident "[" Expr "]" "=" Expr  ";" ;

AssAttr.   Stmt ::= Expr6 "." Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" "(" Arg ":" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.          PrimitiveType ::= "int" ;

Str.          PrimitiveType ::= "string" ;

Bool.         PrimitiveType ::= "boolean" ;

Void.         PrimitiveType ::= "void" ;

ClassT.       ClassType ::= Ident ;

ArrayT.       Type ::= Type "[]" ;

internal Fun. Type ::= Type "(" [Type] ")" ;

Primitive.    Type ::= PrimitiveType ;

Class.        Type ::= ClassType ;

separator  Type "," ;

-- Expressions ---------------------------------------------

ENewArray.  Expr6 ::= "new" Type "[" Expr "]" ;

ENewObject. Expr6 ::= "new" Ident ;

EVar.       Expr6 ::= Ident ;

EArrayElem. Expr6 ::= Ident "[" Expr "]";

ELitInt.    Expr6 ::= Integer ;

ELitTrue.   Expr6 ::= "true" ;

ELitFalse.  Expr6 ::= "false" ;

EAttr.      Expr6 ::= Expr6 "." Ident ;

EMethod.    Expr6 ::= Expr6 "." Ident "(" [Expr] ")" ;

EApp.       Expr6 ::= Ident "(" [Expr] ")" ;

ECast.      Expr6 ::= "(" Type ")" Expr6 ;

EString.    Expr6 ::= String ;

Neg.        Expr5 ::= "-" Expr6 ;

Not.        Expr5 ::= "!" Expr6 ;

EMul.       Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.       Expr3 ::= Expr3 AddOp Expr4 ;

ERel.       Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;

EOr.        Expr ::= Expr1 "||" Expr ;

coercions   Expr 6 ;

separator   Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

